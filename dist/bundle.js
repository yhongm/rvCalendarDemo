!function(e){var t={};function r(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(i,o,function(t){return e[t]}.bind(null,o));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";var i,o=r(1),n=(i=o)&&i.__esModule?i:{default:i};window.onload=function(){(0,n.default)("#app",function(e){alert("selectDate,:"+e)})}},function(e,t,r){"use strict";r.r(t);const i=0,o=1,n=2,s=3;class l{constructor(e,t,r){if(!(this instanceof l))return new l(tagName,t,r);if(this.tag=e,this.props=t||{},this.children=r||[],this.key=t?t.key:void 0,!this.key)throw new Error(`${e} ... the key is undefined`);let i=0;this.children.forEach(e=>{e instanceof l&&(i+=e.count),i++}),this.count=i}render(){const e=document.createElement(this.tag),t=this.props;for(const r in t)d.setAttr(e,r,t[r]);return this.children.forEach(t=>{const r=t instanceof l?t.render():document.createTextNode(t);e.appendChild(r)}),e}}class a{constructor(e,t){this.index=0,this.patches={},this.dfsWalk(e,t,this.index)}dfsWalk(e,t,r){let o=[];if(null==t);else if(d.isString(e)&&d.isString(t))e!=t&&o.push({type:s,content:t});else if(e.tagName===t.tagName&&e.key==t.key){let i=this.diffProps(e,t);i&&o.push({type:n,props:i}),d.isIgnoreChildren(t)||this.diffChildren(e.children,t.children,r,o)}else o.push({type:i,node:t});o.length&&(this.patches[r]=o)}diffProps(e,t){const r=e.props,i=t.props,o={};let n=!0;for(let e in r)i[e]!==r[e]&&(n=!1,o[e]=i[e]);for(let e in i)r.hasOwnProperty(e)||(n=!1,o[e]=i[e]);return n?null:o}diffChildren(e,t,r,i){let n=new c(e,t).getResult();if(t=n.child,n.moves.length){let e={type:o,moves:n.moves};i.push(e)}let s=null,l=r;e.forEach((e,r)=>{let i=t[r];l=s&&s.count?l+s.count+1:l+1,this.dfsWalk(e,i,l),s=e})}}class h{constructor(e,t){this.dfsWalk(e,{index:0},t)}dfsWalk(e,t,r){let i=r[t.index],o=e.childNodes?e.childNodes.length:0;for(let i=0;i<o;i++){let o=e.childNodes[i];t.index++,this.dfsWalk(o,t,r)}i&&this.applyPatches(e,i)}applyPatches(e,t){t.forEach(t=>{switch(t.type){case i:let r=d.isString(t.node)?document.createTextNode(t.node):t.node.render();e.parentNode.replaceChild(r,e);break;case o:this.reorderChildren(e,t.moves);break;case n:this.setProps(e,t.props);break;case s:e.textContent?e.textContent=t.content:e.nodeValue=t.content}})}reorderChildren(e,t){let r=d.toArray(e.childNodes),i={};r.forEach(e=>{if(1===e.nodeType){let t=e.getAttribute("key");t&&(i[t]=e)}}),t.forEach(t=>{let o=t.index;if(0===t.type)r[o]===e.childNodes[o]&&e.removeChild(e.childNodes[o]),r.splice(o,1);else if(1===t.type){let n=i[t.item.key]?i(t.item.key).cloneNode(!0):d.isString(t.item)?document.createTextNode(t.item):t.item.render();r.splice(o,0,n),e.insertBefore(n,e.childNodes[o]||null)}})}setProps(e,t){for(let r in t)if(void 0===t[r])e.removeAttribute(r);else{const i=t[r];d.setAttr(e,r,i)}}}class d{static isString(e){return"string"==typeof e}static toArray(e){if(!e)return[];let t=[];for(let r=0;r<e.length;r++)t.push(e[r]);return t}static isForIn(e){return/^\w* _in_ \w*$/.test(e)}static isForForIn(e){return/^\w* _in*$/.test(e)}static isForOrForFor(e){return/^\w* _in_ \w|_in*$/.test(e)}static isIgnoreChildren(e){return e.props&&e.props.hasOwnProperty("ignore")}static setAttr(e,t,r){switch(t){case"style":e.style.cssText=r;break;case"value":let i=e.tagName||"";"input"===(i=i.toLowerCase())||"textarea"===i?e.value=r:e.setAttribute(t,r);break;default:e.setAttribute(t,r)}}}class c{constructor(e,t){let r=this.makeKeyIndex(e).keyIndex,i=this.makeKeyIndex(t).keyIndex;this.moveOperator=[],this.childList=[];for(let r=0;r<e.length;r++){let o=e[r],n=this.getKey(o);i.hasOwnProperty(n)?this.childList.push(t[i[n]]):this.childList.push(null)}this.tempList=this.childList.slice(0);let o=0;for(;o<this.tempList.length;)null===this.tempList[o]?(this.remove(o),this.removeCopyTempList(o)):o++;let n=0;for(let e=0;e<t.length;e++){let i=t[e],o=this.getKey(i),s=this.tempList[n],l=this.getKey(s);if(s)if(o!=l)if(r.hasOwnProperty(o)){o===getKey(this.tempList[n+1])?(this.remove(e),this.removeCopyTempList(n),n++):this.insert(e,i)}else this.insert(e,i);else n++;else this.insert(e,i)}let s=this.tempList.length-n;for(;n++<this.tempList.length;)s--,this.remove(s+t.length)}makeKeyIndex(e){let t={};for(let r=0;r<e.length;r++){let i=e[r];t[this.getKey(i)]=r}return{keyIndex:t}}getKey(e){if(e)return e.key}removeCopyTempList(e){this.tempList.splice(e,1)}remove(e){this.moveOperator.push({index:e,type:0})}insert(e,t){this.moveOperator.push({index:e,item:t,type:1})}getResult(){return{moves:this.moveOperator,child:this.childList}}}function p(){this.updateFunctions=new Set}p.prototype.add=function(e){this.updateFunctions.add(e)},p.prototype.invoke=function(){this.updateFunctions.forEach(e=>e())};class u{constructor(){this.length=0,this.map=new Object}put(e,t){e in this.map||this.length++,this.map[e]=t}get(e){return e in this.map?this.map[e]:null}remove(e){e in this.map&&(delete this.map[e],this.length--)}size(){return this.length}clear(){length=0,this.map=new Object}}class y{constructor(e){const{el:t,data:r,dom:i}=e;let o=d.isString(t)?document.querySelector(t):t;var n,s,l;this.data=r,this.ve=this.getVirtualElement(this.applyTruthfulData(i)),this.w=this.ve.render(),o.appendChild(this.w),this.observeMap=new u,n=this.data,s=this.observeMap,l=()=>{this.updatedom(i)},Object.keys(n).forEach(e=>{let t=n[e],r=new p;s.put(e,r),Object.defineProperty(n,e,{get:()=>(r.add(l),t),set(e){const i=t!==e;t=e,i&&r.invoke()}})}),this.updatedom(i)}updatedom(e){let t=this.getVirtualElement(this.applyTruthfulData(e));var r,i,o;window.nve=t,window.ve=this.ve,r=this.w,o=this.ve,i=new a(o,t).patches,new h(r,i),this.ve=t}watch(e,t){this.observeMap.get(e).add(t)}getVirtualElement(e){let t=[];for(let r in e.children){let i=e.children[r];if(i instanceof Array)i.forEach(e=>{let r=this.getVirtualElement(e);t.push(r)});else if(i instanceof Object){let e=this.getVirtualElement(i);t.push(e)}else t.push(i)}return function(e,t,r){return new l(e,t,r)}(e.tag,e.props,t)}applyTruthfulData(e){if("for"in e.props||"for_for"in e.props){let t,r=[],i=!1;if(e.props.for){if(d.isForOrForFor(e.props.for))if(e.forData){if(d.isForIn(e.props.for))throw new Error("plase use _in direction");r=e.forData,t=e.props.for.split(" _in")[0]}else{if(d.isForForIn(e.props.for))throw new Error("plase use _in_ direction");r=this.data[e.props.for.split(" _in_ ")[1]],t=e.props.for.split(" _in_ ")[0]}}else{if(!e.props.for_for)throw new Error("the for direction use error");if(d.isForOrForFor(e.props.for_for)){if(d.isForForIn(e.props.for_for))throw new Error("plase use _in_ direction");i=!0,r=this.data[e.props.for_for.split(" _in_ ")[1]],t=e.props.for_for.split(" _in_ ")[0]}}let o=[];return r.forEach(r=>{let n={};n.tag=e.tag,n.children=[],n.props={};for(let o in e.children)d.isString(e.children[o])?y.isPlaceHolder(e.children[o])?-1==y.getPlaceHolderValue(e.children[o]).indexOf(t)?n.children[o]=this.data[y.getPlaceHolderValue(e.children[o])]:n.children[o]=r[y.getPlaceHolderValue(e.children[o]).split(".")[1]]:n.children[o]=e.children[o]:(i&&(e.children[o].forData=r),n.children[o]=this.applyTruthfulData(e.children[o]));let s=Object.keys(e.props);for(let i in s){let o=s[i];if("style"===o){let i=e.props[o];if(i.indexOf(",")>-1){let e=i.split(",");n.props[o]=this.handleArrayStyle(r,e,t)}else n.props[o]=this.handleSingleStyle(r,i,t)}else y.isPlaceHolder(e.props[o])?-1==y.getPlaceHolderValue(e.props[o]).indexOf(t)?n.props[o]=this.data[y.getPlaceHolderValue(e.props[o])]:n.props[o]=r[y.getPlaceHolderValue(e.props[o]).split(".")[1]]:n.props[o]=e.props[o]}o.push(n)}),o}{let t={};t.tag=e.tag,t.children=[],t.props={};for(let r in e.children)d.isString(e.children[r])?y.isPlaceHolder(e.children[r])?t.children[r]=this.data[y.getPlaceHolderValue(e.children[r])]:t.children[r]=e.children[r]:t.children[r]=this.applyTruthfulData(e.children[r]);let r=Object.keys(e.props);for(let i in r){let o=r[i];if("style"===o){let r=e.props[o];if(r.indexOf(",")>-1){let e=r.split(",");t.props[o]=this.handleArrayStyle(this.data,e,void 0)}else t.props[o]=this.handleSingleStyle(this.data,r,void 0)}else y.isPlaceHolder(e.props[o])?t.props[o]=this.data[y.getPlaceHolderValue(e.props[o])]:t.props[o]=e.props[o]}return t}}handleSingleStyle(e,t,r){let i="";if(r)if(y.isPlaceHolder(t))if(-1!=y.getPlaceHolderValue(t).indexOf(r)){i=e[y.getPlaceHolderValue(t).split(".")[1]]}else{let r=t.split(":")[0],o=t.split(":")[1];i=r+":"+(o=e[y.getPlaceHolderValue(o)])}else i=t;else{let r=t.split(":")[0],o=t.split(":")[1];i=y.isPlaceHolder(o)?r+":"+(o=e[y.getPlaceHolderValue(o)]):t}return i}handleArrayStyle(e,t,r){let i="";for(let o of t){i+=this.handleSingleStyle(e,o,r)+";"}return i}static isPlaceHolder(e){return!!e&&!(!e.startsWith("%#")||!e.endsWith("#%"))}static getPlaceHolderValue(e){return e.slice(2,-2)}}var f=y;function g(){this.months=new Array("一","二","三","四","五","六","七","八","九","十","十一","十二"),this.dayCounts=new Array(31,28,31,30,31,30,31,31,30,31,30,31),this.days=new Array("日","一","二","三","四","五","六"),this.today=this.getToday(),this.year=this.today.year,this.month=this.today.month,this.newCal=new Date,this.selectDay=this.newCal,this.day=-1,this.startDay=0,this.daily=0,this.rv=void 0,this.today.year==this.newCal.getFullYear()&&this.today.month==this.newCal.getMonth()&&(this.day=this.today.day)}r.d(t,"default",function(){return w}),g.prototype.getWeeks=function(){this.newCal=new Date(this.year,this.month,1),this.day=-1,this.startDay=this.newCal.getDay(),this.daily=0,this.today.year==this.newCal.getFullYear()&&this.today.month==this.newCal.getMonth()&&(this.day=this.today.day);for(var e=this.getDayCounts(this.newCal.getMonth(),this.newCal.getFullYear()),t=[],r=0;r<6;r++){var i=[];i.id=`week_row_${r}`;for(var o=0;o<7;o++){var n={},s="",l="",a="",h=`week_day_${r}${o}`;o==this.startDay&&0==this.daily&&(this.daily=1),this.day==this.daily?(l="font-weight:bold;color:#000000;background-color:#FFFFFF;height:20px;text-align:center",a="current"):6==o?(l="color:#FF0000;text-decoration:none;background-color:#E5E9F2;text-align:center;height:18px;width:12%",a="sat"):0==o?(l="color: #FF0000;text-decoration:none;background-color:#E5E9F2;text-align:center;height:18px;width:12%",a="sun"):(l="color:#243F65;background-color:#E5E9F2;height:20px;width:11%;text-align:center",a="normal"),this.daily>0&&this.daily<=e?(s=this.daily+"",this.daily++):(l="color:#000000;background-color: #f6f6f6;height:20px;width: 11%;text-align:center",s=""),n.content=s,n.id=h,n.lable=a,n.style=l,i.push(n)}t.push(i),window.weeks=t}return t},g.prototype.getDayCounts=function(e,t){return 1==e?0==t%4&&0!=t%100||0==t%400?29:28:this.dayCounts[e]},g.prototype.getToday=function(){var e={},t=new Date;return e.now=t,e.year=t.getFullYear(),e.month=t.getMonth(),e.day=t.getDate(),e},g.prototype.subMonth=function(){this.month-1<0?(this.month=11,this.year=this.year-1):this.month=this.month-1,console.log("month:"+this.month)},g.prototype.addMonth=function(){this.month+1>11?(this.month=0,this.year=this.year+1):this.month=this.month+1},g.prototype.setMonth=function(e){e<1||e>12?alert("月份必须在1-12之间!"):this.month=e},g.prototype.setYear=function(e){this.year=e},window.mouseOver=function(e){e.style.color="#FFFFFF"},window.mouseOut=function(e){var t=e.getAttribute("lable");e.style.color="sat"==t||"sun"==t?"#FF0000":"#000000"};let m=new g;function w(e,t){var r=m.getWeeks();let i=new f({el:e,data:{year:""+m.year,month:""+(m.month+1),weekTitles:[{id:"weekkey1",value:"一"},{id:"weekkey2",value:"二"},{id:"weekkey3",value:"三"},{id:"weekkey4",value:"四"},{id:"weekkey5",value:"五"}],weeks:r},dom:{tag:"table",props:{border:0,cellpadding:"0",cellspacing:"1",id:"caltable",key:"table",style:"text-decoration:none;width:200;background-color:#D0D0EE;font-size:8pt;border:0px dotted #1C6FF5;"},children:[{tag:"thead",props:{key:"thead"},children:[{tag:"tr",props:{align:"center",valign:"middle",id:"title",key:"title",style:"font-weight:normal;height:24px;text-align:center;color:#333333;text-decoration:none;background-color:#A4B9D7;border-top-width:1px;border-right-width:1px;border-bottom-width: 1px; border-left-width: 1px;border-bottom-style: 1px;border-top-color: #999999;border-right-color: #999999;border-bottom-color:#999999;border-left-color:#999999;"},children:[{tag:"td",props:{colspan:"7",key:"tdTitle"},children:[{tag:"div",props:{key:"titleDiv"},children:[{tag:"button",props:{onclick:"mCalendar.subMonth()",style:"font-weight:bold; color:#243F65;cursor:hand;text-decoration:none;",key:"subButton"},children:["<"]},{tag:"input",props:{name:"year",type:"text",maxlength:"4",style:"font-size: 9pt; text-decoration: none;background-color: #FFFFFF;height: 20px;border: 1px solid #666666; color: #000000;",size:"4",value:"%#year#%",key:"inputYear"},children:[""]},{tag:"input",props:{name:"month",type:"text",maxlength:"2",value:"%#month#%",style:"font-size: 9pt; text-decoration: none;background-color: #FFFFFF;height: 20px;border: 1px solid #666666; color: #000000;",size:"2",key:"inputMonth"},children:[""]},{tag:"button",props:{onclick:"mCalendar.addMonth()",style:"font-weight: bold;color: #243F65;cursor: hand;text-decoration: none;",key:"addButton"},children:[">"]}]}]}]},{tag:"tr",props:{key:"daytr"},children:[{tag:"td",props:{style:"color: #FF0000;text-decoration: none;background-color: #C0D0E8;text-align: center;height: 20px;width: 12%;",key:"daySunTitle"},children:["日"]},{tag:"td",props:{style:"color:#000000;background-color:#C0D0E8;height:20px;width:11%;text-align:center;",key:"%#v.id#%",for:"v _in_ weekTitles"},children:["%#v.value#%"]},{tag:"td",props:{style:" color:#FF0000;text-decoration:none;background-color:#C0D0E8;text-align:center;height: 20px;width: 12%;",key:"daySatTitle"},children:["六"]}]}]},{tag:"tbody",props:{cellspacing:"0",cellpadding:"0",id:"calendar",style:" text-decoration: none;width: 170;background-color: #C0D0E8;font-size: 9pt;border: 0px dotted #1C6FA5;",align:"center",border:"1",key:"tbody"},children:[{tag:"tr",props:{style:"cursor:hand",key:"%#week.id#%",for_for:"week _in_ weeks"},children:[{tag:"td",props:{key:"%#v.id#%",onclick:"clickDay(this)",style:"%#v.style#%",lable:"%#v.lable#%",onMouseover:"mouseOver(this);",onMouseOut:"mouseOut(this);",for:"v _in"},children:["%#v.content#%"]}]}]}]}}),o=m.month,n=m.year,s=m.selectDay;Object.defineProperty(m,"month",{set(e){console.log("newMonth:"+e),o!=e&&(o=e,i.data.weeks=m.getWeeks(),i.data.month=e+1)},get:()=>o}),Object.defineProperty(m,"year",{set(e){n!=e&&(console.log("newYear:"+e),n=e,i.data.weeks=m.getWeeks(),i.data.year=e)},get:()=>n}),Object.defineProperty(m,"selectDay",{set(e){s!=e&&(s=e,t(e))},get:()=>s})}window.mCalendar=m,window.clickDay=function(e){if(""!=e.innerText){var t=new Date(m.year,m.month,e.innerText);m.selectDay=t}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,